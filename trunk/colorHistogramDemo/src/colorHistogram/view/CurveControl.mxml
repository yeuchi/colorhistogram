<?xml version="1.0" encoding="utf-8"?>
<!--
// ==================================================================
// Module:		colorHistogramDemo.as
//
// Description:	demonstrate the color histogram component
//
// Input:		bitmapData
// Output:		bitmapData - color corrected
//
// Author(s):	C.T. Yeung			cty
//
// History:
// 15Jul08		Basic functionality v.5.0						cty
// 24Dec08		Using BitmapData.palette() method instead of
//				walking pixels manually.						cty
// 18Feb09		Bug fix, requantize curve out of bound values 	cty
//
// Copyright (c) 2009 C.T.Yeung

// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ==================================================================
-->
<mx:Canvas 	xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns:com="colorHistogram.com.*"
			width="100%" height="100%" 
			creationComplete="onCreationComplete()">
	
	<mx:Metadata>
		[Event(name="change", type="flash.events.Event")]	
	</mx:Metadata>
			
	<mx:Script>
		<![CDATA[
			import colorHistogram.com.Interpolate;
			import colorHistogram.com.CumHist;
			import flash.geom.Point;
			
			protected var sound:Sound;
			protected const CHANNEL_MAX:int = 255;
			protected const CHANNEL_RANGE:int = 256;
			
			// colors for curves
			public const COLOR_RGB:uint = 0x888888;
			public const COLOR_RED:uint = 0xFF0000;
			public const COLOR_GRN:uint = 0x00FF00;
			public const COLOR_BLU:uint = 0x0000FF;
			public const COLOR_ALP:uint = 0xFF000000;

			//  curve display bitmap			
			protected var bmpCumHist:BitmapData;
			protected var bmpOverlay:BitmapData;

			// current curve on display
			protected var curveRGB:CumHist;
			protected var curveRED:CumHist;
			protected var curveGRN:CumHist;
			protected var curveBLU:CumHist;
			protected var curveALP:CumHist;
			
			// interpolation object
			protected var interpolateRED:Interpolate;
			protected var interpolateGRN:Interpolate;
			protected var interpolateBLU:Interpolate;
			protected var interpolateRGB:Interpolate;
			protected var interpolateALP:Interpolate;

			[Bindable] public var currentColor:uint;
		
			// --------------------------------------------------------------------------
			public function onCreationComplete():void {
			// --------------------------------------------------------------------------
				var bounds:Array = [new Point(0,0), new Point(255,255)];
				interpolateRED = new Interpolate(bounds);
				interpolateGRN = new Interpolate(bounds);
				interpolateBLU = new Interpolate(bounds);
				interpolateRGB = new Interpolate(bounds);
				interpolateALP = new Interpolate(bounds);
				sound = new Sound(new URLRequest("http://www.ctyeung.com/flex/ColorHistogramDemo/assets/slideDoor.mp3"));
			}
			
			// --------------------------------------------------------------------------
			public function set Color(clr:uint):void {
			// --------------------------------------------------------------------------
				currentColor = clr;
			}
			
			// --------------------------------------------------------------------------
			public function set curve(hist:Array):void {
			// --------------------------------------------------------------------------	
				if (hist==null)
					return;
					
				var table:CumHist = (currentColor == COLOR_RGB)? curveRGB = new CumHist(hist) :
									(currentColor == COLOR_RED)? curveRED = new CumHist(hist) :
									(currentColor == COLOR_GRN)? curveGRN = new CumHist(hist) :
									(currentColor == COLOR_BLU)? curveBLU = new CumHist(hist) :
									curveALP = new CumHist(hist);
				
				drawCumHistogram(table, this.currentColor);
			}
			
			// --------------------------------------------------------------------------
			public function get LUT():Array
			// --------------------------------------------------------------------------
			{
				var array:Array = new Array();
				var lut:Interpolate = this.interpolation;
				for ( var x:int=0; x<CHANNEL_RANGE; x++ ) {
					array.push(lut.getY(x));
				}	
				return array;
			}
			
			// --------------------------------------------------------------------------
			public function get interpolation():Interpolate {
			// --------------------------------------------------------------------------	
				return 	(currentColor == COLOR_RGB)?interpolateRGB:
						(currentColor == COLOR_RED)?interpolateRED:
						(currentColor == COLOR_GRN)?interpolateGRN:
						(currentColor == COLOR_BLU)?interpolateBLU:
						interpolateALP;
			}
			// --------------------------------------------------------------------------
			public function get curve():Array {
			// --------------------------------------------------------------------------	
				return 	(currentColor == COLOR_RGB)? curveRGB.table :
						(currentColor == COLOR_RED)? curveRED.table :
						(currentColor == COLOR_GRN)? curveGRN.table :
						(currentColor == COLOR_BLU)? curveBLU.table :
						(currentColor == COLOR_ALP)? curveALP.table :
						null;
			}
			
			// --------------------------------------------------------------------------
			protected function get colorOpposite():uint {
			// --------------------------------------------------------------------------	
				return 	(currentColor == COLOR_RGB)?0xFF0000FF:
						(currentColor == COLOR_RED)?0xFF00FFFF:
						(currentColor == COLOR_GRN)?0xFFFF00FF:
						(currentColor == COLOR_BLU)?0xFFFFFF00:
						0xFF00FF00;
			}
			
			private var firstTime:Boolean=true;
			// --------------------------------------------------------------------------
			public function onMove(InOut:String):void {
			// --------------------------------------------------------------------------	
				switch(InOut) {
					case "IN":
					moveIn.end();
					moveIn.play();
					break;
					
					case "OUT":
					moveOut.end();
					moveOut.play();
					break;
				}
				if(firstTime)
					firstTime = false;
				else
					sound.play();
			}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Image Processing
			
			// --------------------------------------------------------------------------
			protected function drawCurveGrids():void {
			// --------------------------------------------------------------------------	
				// draw grid
				bmpCumHist.fillRect(new Rectangle(0, 0, 1, CHANNEL_RANGE), 0);
				bmpCumHist.fillRect(new Rectangle(CHANNEL_RANGE/4, 0, 1, CHANNEL_RANGE), 0);
				bmpCumHist.fillRect(new Rectangle(CHANNEL_RANGE/2, 0, 1, CHANNEL_RANGE), 0);
				bmpCumHist.fillRect(new Rectangle(CHANNEL_RANGE/4*3, 0, 1, CHANNEL_RANGE), 0);
				bmpCumHist.fillRect(new Rectangle(CHANNEL_RANGE, 0, 1, CHANNEL_RANGE), 0);
				
				bmpCumHist.fillRect(new Rectangle(0, 0, CHANNEL_RANGE, 1), 0);
				bmpCumHist.fillRect(new Rectangle(0, CHANNEL_RANGE/4, CHANNEL_RANGE, 1), 0);
				bmpCumHist.fillRect(new Rectangle(0, CHANNEL_RANGE/2, CHANNEL_RANGE, 1), 0);
				bmpCumHist.fillRect(new Rectangle(0, CHANNEL_RANGE/4*3, CHANNEL_RANGE, 1), 0);
				bmpCumHist.fillRect(new Rectangle(0, CHANNEL_RANGE, CHANNEL_RANGE, 1), 0);
				
				drawLUT();
			}
			
			// --------------------------------------------------------------------------
			// Draws the adjustable look up table on the overlay bitmap
			protected function drawLUT(	ptHL:Point=null,
										isAnchor:Boolean=false):void 	
			// --------------------------------------------------------------------------
			{
				if ( bmpOverlay != null )
					bmpOverlay.dispose();
					
				bmpOverlay = new BitmapData(bmpCumHist.width, bmpCumHist.height, true, 0xFFFFFF);	
				var lut:Interpolate = this.interpolation;
				
				
				for ( var x:int=0; x<CHANNEL_RANGE; x++) {
					var y:Number = lut.getY(x);
					if ((ptHL!=null)&&(x==Point(ptHL).x)) {	// highlight point on LUT if mouse over
						var clr:uint = (isAnchor)? 0xFFFFFFFF - colorOpposite + 0xFF000000:colorOpposite;
						var offset:int = (isAnchor)? 2:1;
						var size:int=(isAnchor)?5:3;
						bmpOverlay.fillRect(new Rectangle(Point(ptHL).x-offset, CHANNEL_MAX-Point(ptHL).y-offset, size,size), clr);
					}							
					else if (lut.isAnchorX(x))				// highlight anchors
						bmpOverlay.fillRect(new Rectangle(x-1, bmpOverlay.height-int(y)-1,3,3), 0xFF000000);
					else									// otherwise, draw the curve as usual
						bmpOverlay.fillRect(new Rectangle(x, bmpOverlay.height-int(y), 1, 1), 0xFF000000);
				}
				imgOverlay.source = new Bitmap(bmpOverlay);
			}
				
			// --------------------------------------------------------------------------
			protected function drawCumHistogram(curve:CumHist, clr:uint):void
			// --------------------------------------------------------------------------	
			{
				bmpCumHist = new BitmapData(CHANNEL_RANGE, CHANNEL_RANGE, false, 0xFFFFFF);
				var max:Number = curve.Sum;
				var factor:Number = CHANNEL_RANGE / max;
				for ( var i:int=curve.StartPos; i<=curve.EndPos; i++) {
					var height:Number = curve.getY(i) * factor;
					height = (height <0)?0:height;
					height = (height>255)?255:height;
					bmpCumHist.fillRect(new Rectangle(i, CHANNEL_RANGE-height, 1, height), clr);
				}
				
				drawCurveGrids();
				imgCumHist.source = new Bitmap(bmpCumHist);
			}
			
///////////////////////////////////////////////////////////////////////////////////////////////////
// Mouse events
			protected var onAnchorFocus:Boolean = false;	// is an anchor in focus ?
			protected var anchorFocused:Point=null;			// anchor current in use
			protected var isAnchor:Boolean=false;
			
			public const INTERPOLATE_LINEAR:String = "LINEAR";
			public const INTERPOLATE_CUBIC_SPLINE:String = "CUBIC_SPLINE";
		
			// --------------------------------------------------------------------------
			// dragging an anchor point
			private function onMouseMove(e:MouseEvent):void
			// --------------------------------------------------------------------------	
			{
				// show statistics
				var pts:Array = this.curve;
				lblIndex.text = e.localX.toString();
				//lblCount.text = Point(pts[e.localX-1]).y.toString();
				lblCount.text = (String)(255-e.localY).toString();
				
				var lut:Interpolate = this.interpolation;
				var y:Number = lut.getY(e.localX-1);
				
				
				// during an anchor move
				if ( onAnchorFocus == true ) {
					lut.removeAnchor(anchorFocused.x);							// remove this anchor from previous position
					anchorFocused = new Point(e.localX, CHANNEL_MAX-e.localY);	// create a new anchor
					
					lut.method = INTERPOLATE_CUBIC_SPLINE;
					lut.addAnchor(anchorFocused);								// add it to LUT
					drawLUT(anchorFocused);										// draw the new LUT on curveControl
				}
				// mouse over
				else if (( y+1 > CHANNEL_MAX-e.localY ) && ( y-1 < CHANNEL_MAX-e.localY )) { 
					// bitmap coordinates are backward from our LUT coordinates in Y axis.
					isAnchor = lut.isAnchorX(e.localX);
					drawLUT(new Point(e.localX-1, CHANNEL_MAX-e.localY), isAnchor);
				}
			}
			
			// --------------------------------------------------------------------------
			// moved an anchor point
			private function onMouseUp(e:MouseEvent):void {
			// --------------------------------------------------------------------------
				if ( onAnchorFocus == true ) {
					dispatchEvent(new Event("change"));
					onAnchorFocus = false;
				}
			}
			
			// --------------------------------------------------------------------------
			// lock on an anchor point
			private function onMouseDown(e:MouseEvent):void {
			// --------------------------------------------------------------------------	
				var curve:CumHist = (currentColor == COLOR_RGB)?curveRGB:
									(currentColor == COLOR_RED)?curveRED:
									(currentColor == COLOR_GRN)?curveGRN:
									(currentColor == COLOR_BLU)?curveBLU:
									this.curveALP;
									
				var y:int = curve.getY(e.localX);
				if (( y < CHANNEL_MAX-e.localY+1 ) || ( y > CHANNEL_MAX-e.localY-1)) {
					onAnchorFocus =  true;
					var lut:Interpolate = this.interpolation;
					anchorFocused = lut.getAnchor(e.localX);
					anchorFocused = (anchorFocused==null)?new Point(e.localX, CHANNEL_MAX-e.localY) : anchorFocused;
				}
			}
		]]>
	</mx:Script>
	<mx:Move id="moveOut" target="{this}" xFrom="-257" xTo="10" duration="1700"/>
	<mx:Move id="moveIn" target="{this}" xFrom="10" xTo="-257" duration="1700"/>
	
	<mx:VBox borderColor="gray" borderStyle="solid" borderThickness="1">
		<mx:Image id="imgCumHist" width="256" height="256"/>
	</mx:VBox>
	<mx:HBox includeInLayout="false" x="10" y="10">
		<mx:Label text="X:" fontSize="8"/>
		<mx:Label id="lblIndex" fontSize="8"/>
	</mx:HBox>
	<mx:HBox includeInLayout="false" x="10" y="20">
		<mx:Label text="Y:" fontSize="8"/>
		<mx:Label id="lblCount" fontSize="8"/>
	</mx:HBox>
	<mx:Image id="imgOverlay" includeInLayout="false"
				 	x="{imgCumHist.x}" y="{imgCumHist.y}" 
				 	width="256" height="256" 
					mouseMove="onMouseMove(event)" 
					mouseDown="onMouseDown(event)" 
					mouseUp="onMouseUp(event)"/>
</mx:Canvas>
