<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas  xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns:comp="com.*"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
			width="100%" height="300"
			creationComplete="onCreationComplete()"
			mouseMove="onMouseMoveSlider(event)"
			mouseUp="onMouseUp()">
			
	<mx:Metadata>
		[Event(name="change", type="flash.events.Event")]	
	</mx:Metadata>		
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			[Bindable] private var bmpSrc:BitmapData;
			[Bindable] private var bmpDes:BitmapData;
			[Bindable] private var cmbChoices:Array;
			
			public const AUTO_CONTRAST:String="AUTO_CONTRAST";
			public const AUTO_QUARTER_PTS:String="AUTO_QUARTER_PTS";
			public const AUTO_CURVE:String="AUTO_CURVE";
			
			public const COLOR_RGB:uint = 0x888888;
			public const COLOR_RED:uint = 0xFF0000;
			public const COLOR_GRN:uint = 0x00FF00;
			public const COLOR_BLU:uint = 0x0000FF;
			public const COLOR_ALP:uint = 0xFF000000;
		
			public const CHANNEL_RGB:int = 0;
			public const CHANNEL_RED:int = 1;
			public const CHANNEL_GRN:int = 2;
			public const CHANNEL_BLU:int = 3;
			public const CHANNEL_ALP:int = 4;
			
			public const CTRL_BLK:int = 0;
			public const CTRL_GAM:int = 1;
			public const CTRL_WHT:int = 2;
			
			public const SPACER:int = 6;
			public const TRACK_MIN:int=0;
			public const TRACK_MAX:int=255;
			
			protected var lastMousePos:Point=null;
			protected var autoSetting:String = "";
			protected var histProcessor:HistogramProcessor;
			protected var slideCtrl:Array;
			
			// --------------------------------------------------------------------------
			public function onCreationComplete():void 
			// --------------------------------------------------------------------------
			{
				cmbChoices = new Array ("RGB", "Red", "Green", "Blue", "Alpha");
				moveIn.end();
				moveIn.play();
				curveCtrl.onMove("IN");
				boxControls.visible=false;
			
				var bmpControls:BitmapData = new BitmapData(256, 20, false, 0xFFFFFF);
				bmpControls.fillRect(new Rectangle(0, 10, TRACK_MAX, 1), 0x00);
				imgControls.source = new Bitmap(bmpControls);
				
				histProcessor = new HistogramProcessor();
			}	

///////////////////////////////////////////////////////////////////////////////////////////////////
// properties

			public function get bmpSource ():BitmapData {
				return bmpSrc;
			}
			
			public function get bmpResult ():BitmapData {
				return bmpDes;
			}
			
			public function set auto(adjust:String):void {
				autoSetting = adjust;	
			}

			public function set bmpSource (bmp:BitmapData):void {
				bmpSrc = bmp.clone();	
				
				histCtrl.bitmap = bmpSrc;
				InitSlideCtrl();
				onChangeChannel();
			}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Initialization 

			private function InitSlideCtrl():void {
				slideCtrl = new Array();
				slideCtrl[CHANNEL_RGB]=[0, TRACK_MAX/2, TRACK_MAX];
				slideCtrl[CHANNEL_RED]=[0, TRACK_MAX/2, TRACK_MAX];
				slideCtrl[CHANNEL_GRN]=[0, TRACK_MAX/2, TRACK_MAX];
				slideCtrl[CHANNEL_BLU]=[0, TRACK_MAX/2, TRACK_MAX];
				slideCtrl[CHANNEL_ALP]=[0, TRACK_MAX/2, TRACK_MAX];
				setSlideCtrl();
			}
			
			private function setSlideCtrl():void {
				var channel:int = getChannel();

				this.imgBlk.x = slideCtrl[channel][CTRL_BLK]+SPACER;
				this.imgWht.x = slideCtrl[channel][CTRL_WHT]+SPACER;
				this.imgGam.x = slideCtrl[channel][CTRL_GAM]+SPACER;
									
				this.txtBlk.text = slideCtrl[channel][CTRL_BLK].toString();
				this.txtWht.text = slideCtrl[channel][CTRL_WHT].toString();
				this.txtGam.text = String(Number(imgGam.x)/TRACK_MAX*2);
			}
			
			
///////////////////////////////////////////////////////////////////////////////////////////////////
// Buttons pressed
			
			private function onEffectEnd():void
			{
				imgBlk.visible=false;
				imgWht.visible=false;
				imgGam.visible=false;
				onClickHist();
			}
			
			private function onClickIcon():void {
				boxControls.visible=true;
				
				if ( boxControls.y == -300 ) {
					moveOut.end();
					moveOut.play();
				}
				else {
					imgBlk.visible=false;
					imgWht.visible=false;
					imgGam.visible=false;
					moveIn.end();
					moveIn.play();
				}
			}
			
			public function onClickHist():void {
				
				if ( curveCtrl.x < 0 ) {
					curveCtrl.onMove("OUT");
					imgBlk.visible = false;
					imgWht.visible = false;
					imgGam.visible = false;
					btnHist.label = "Histogram";
				}
				else {
					curveCtrl.onMove("IN");
					imgBlk.visible = true;
					imgWht.visible = true;
					imgGam.visible = true;
					btnHist.label = "Curve";
				}
			}
			
			public function onClickPreview():void {
				if (btnPreview.label == "Preview" ) {
					btnPreview.label = "Original";
					bmpDes = bmpSrc.clone();
					dispatchEvent(new Event("change"));
				}
				else {
					btnPreview.label = "Preview";
					HistogramProcess();
					onChangeCurve();
				}
			}
			
			public function onClickOK():void {
				if ( bmpDes == null )
					return;
					
				if ( bmpSrc != null )
					bmpSrc.dispose();
					
				bmpSrc = bmpDes.clone();
				dispatchEvent(new Event("change"));
				onDefaultSlider();
			}
			
			public function onClickAuto():void {
				
			}
			
			public function onClickCancel():void {
				if ( bmpDes != null )
					bmpDes.dispose();
				
				// reset curves
				var lut:HistTable = histCtrl.getHistLUT();
				curveCtrl.onCreationComplete();
				curveCtrl.curve = lut.Table;
				
				// reset histogram	
				bmpDes = bmpSrc.clone();
				dispatchEvent(new Event("change"));
				onDefaultSlider();
			}

			protected function onChangeChannel():void {
				var lut:HistTable = histCtrl.getHistLUT();
				var clr:uint = getHistColor();
				histCtrl.colorChannel = cmbChannel.selectedLabel;
				histCtrl.drawHistogram(lut, clr);
				curveCtrl.Color = clr;
				curveCtrl.curve = lut.Table;
				setSlideCtrl();
			}
			
			protected function onDefaultSlider():void {
				this.imgBlk.x = 0+SPACER;
				this.imgWht.x = TRACK_MAX+SPACER;
				this.imgGam.x = TRACK_MAX/2+SPACER;
				this.txtBlk.text = "0";
				this.txtGam.text = "1.0";
				this.txtWht.text = "255";	
			}
			
///////////////////////////////////////////////////////////////////////////////////////////////////
// Mouse move histogram controls

			protected var imgBlkFocus:Boolean = false;
			protected var imgGamFocus:Boolean = false;
			protected var imgWhtFocus:Boolean = false;
			
			protected function onMouseDownBlk():void {
				imgBlkFocus = ( imgBlk.visible == true )? true : false;
			}
			 
			protected function onChangeBlk():void {
				var pos:int = parseInt(txtBlk.text);
				if ( ( pos < TRACK_MAX ) && ( pos >= TRACK_MIN ) ) {
					imgBlk.x = pos+SPACER;
					histCtrl.onMouseOverHist(new MouseEvent("",false, false,pos,0));
					var clr:int = getChannel();
					if ( slideCtrl[clr][CTRL_BLK] != pos ){
						slideCtrl[clr][CTRL_BLK] = pos;
						HistogramProcess();
					}
				}
			}
			
			protected function onMouseDownWht():void {
				imgWhtFocus = ( imgWht.visible == true )? true : false;
			}
			
			// -------------------------------------------------------------------------- 
			// White has changed, record new location and invoke image processing.
			protected function onChangeWht():void 
			// --------------------------------------------------------------------------
			{
				var pos:int = parseInt(txtWht.text);
				if ( ( pos < TRACK_MAX ) && ( pos >= TRACK_MIN ) ) {
					imgWht.x = pos;
					histCtrl.onMouseOverHist(new MouseEvent("",false, false,pos,0));
					var clr:int = getChannel();
					if ( slideCtrl[clr][CTRL_WHT] != pos ) {
						slideCtrl[clr][CTRL_WHT] = pos;
						HistogramProcess();
					}
				}
			}
			
			// --------------------------------------------------------------------------
			// Record the action of mouse down on gamma button
			// onMouseMoveSlider will be active now
			protected function onMouseDownGam():void 
			// --------------------------------------------------------------------------
			{
				imgGamFocus = ( imgGam.visible == true )? true : false;
			}
			 
			// -------------------------------------------------------------------------- 
			// Gamma has changed, record new location and invoke image processing
			protected function onChangeGam():void 
			// --------------------------------------------------------------------------
			{
				var pos:Number = parseFloat(txtGam.text);
				if ( ( pos >= 0 ) && ( pos <= 2 ) ) {
					imgGam.x = int(pos / 2.0 * TRACK_MAX);
					histCtrl.onMouseOverHist(new MouseEvent("",false, false,imgGam.x,0));
					var clr:int = getChannel();
					if ( slideCtrl[clr][CTRL_GAM] != imgGam.x-SPACER ) {
						slideCtrl[clr][CTRL_GAM] = imgGam.x-SPACER;
						HistogramProcess();
					}
				}
			}
			
			// --------------------------------------------------------------------------
			// Moving the slider
			protected function onMouseMoveSlider(e:MouseEvent):void 
			// --------------------------------------------------------------------------
			{
				if ( imgBlkFocus == true ) {
					if ( ( this.mouseX >= TRACK_MIN+SPACER ) && ( this.mouseX <= TRACK_MAX+SPACER  ) ) {
						imgBlk.x = this.mouseX-SPACER;
						txtBlk.text = (this.mouseX-SPACER).toString();
						histCtrl.onMouseOverHist(e);
					}
				}
				else if ( imgWhtFocus == true ) {
					if ( ( this.mouseX >= TRACK_MIN+SPACER ) && ( this.mouseX <= TRACK_MAX+SPACER ) ) {
						imgWht.x = this.mouseX-SPACER;
						txtWht.text = (this.mouseX-SPACER).toString();
						histCtrl.onMouseOverHist(e);
					}
				}
				else if ( imgGamFocus == true ) {
					if ( ( this.mouseX >= TRACK_MIN+SPACER ) && ( this.mouseX <= TRACK_MAX+SPACER ) ) {
						imgGam.x = this.mouseX-SPACER;
						txtGam.text = String(Number(this.mouseX-SPACER )/TRACK_MAX*2);
						histCtrl.onMouseOverHist(e);
					}
				}
			}
			
			// --------------------------------------------------------------------------
			// Apply gamma or histogram equalization if mouse up from slider
			protected function onMouseUp():void 
			// --------------------------------------------------------------------------
			{
				if ( imgBlkFocus == true ) {
					imgBlkFocus = false;
					HistogramProcess();
					onChangeBlk();
				}
				else if ( imgWhtFocus == true ) {
					imgWhtFocus = false;
					HistogramProcess();
					onChangeWht();
				}
				else if ( imgGamFocus == true ) {
					imgGamFocus = false;
					
					onChangeGam();
				}
			}
			
///////////////////////////////////////////////////////////////////////////////////////////////////
// Heavy lifting - image processing

			// --------------------------------------------------------------------------
			// process image based on curves
			private function onChangeCurve():void 
			// --------------------------------------------------------------------------
			{
				bmpDes = histProcessor.doLookUp(bmpSrc, this.curveCtrl.LUT, this.cmbChannel.selectedLabel);
				if ( (btnPreview.label == "Preview" ) && (bmpDes != null ) ) {
					// need to add a loop to create another cummulative histogram later
					// to show new changes.
					dispatchEvent(new Event("change"));	
				}
			}
			
			// --------------------------------------------------------------------------
			// process image based on histogram changes
			private function HistogramProcess():void 
			// --------------------------------------------------------------------------
			{
				var gamma:Number = Number(imgGam.x )/TRACK_MAX*2;
				bmpDes = histProcessor.process(bmpSrc, imgBlk.x-SPACER, imgWht.x-SPACER, gamma, this.cmbChannel.selectedLabel);
					if ( (btnPreview.label == "Preview" ) && (bmpDes != null ) )
						dispatchEvent(new Event("change"));
			}

			// --------------------------------------------------------------------------
			// return a color to fill UI
			protected function getHistColor():uint 
			// --------------------------------------------------------------------------
			{
				return 	(cmbChannel.selectedLabel == "RGB")?COLOR_RGB:
						(cmbChannel.selectedLabel == "Red")?COLOR_RED:
						(cmbChannel.selectedLabel == "Green")?COLOR_GRN:
						(cmbChannel.selectedLabel == "Blue")?COLOR_BLU:
						COLOR_ALP;
			}

			// --------------------------------------------------------------------------
			// return an index for array selection
			protected function getChannel():int 
			// --------------------------------------------------------------------------
			{
				return 	(cmbChannel.selectedLabel == "RGB")?CHANNEL_RGB:
						(cmbChannel.selectedLabel == "Red")?CHANNEL_RED:
						(cmbChannel.selectedLabel == "Green")?CHANNEL_GRN:
						(cmbChannel.selectedLabel == "Blue")?CHANNEL_BLU:
						CHANNEL_ALP;
			}
			
		]]>
	</mx:Script>
	
	<mx:Move id="moveOut" target="{boxControls}" yFrom="-300" yTo="30" duration="2000" effectEnd="onEffectEnd()"/>
	<mx:Move id="moveIn" target="{boxControls}" yFrom="30" yTo="-300" duration="2000"/>
	
	<mx:VBox height="300" horizontalScrollPolicy="off" verticalScrollPolicy="off">	
<!-- Histogram control panel -->
		<mx:HBox id="boxControls" backgroundColor="0xFFFFFF"
				 paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" height="100%">
			<mx:VBox id="boxHist" height="100%">
				<comp:HistogramControl id="histCtrl"/>
				
				<mx:Image id="imgControls" width="256" height="20"/>
				
				<mx:HBox>
					<mx:Label text="Black:" fontSize="8"/>
					<mx:TextInput id="txtBlk" text="0" width="38" fontSize="8" change="onChangeBlk()"/>
					<mx:Label text="Gray:" fontSize="8"/>
					<mx:TextInput id="txtGam" text="127" width="38" fontSize="8" change="onChangeGam()"/>
					<mx:Label text="White:" fontSize="8"/>
					<mx:TextInput id="txtWht" text="255" width="38" fontSize="8" change="onChangeWht()"/>
				</mx:HBox>
				
			</mx:VBox>	
			<comp:CurveControl id="curveCtrl" x="-257" includeInLayout="false" alpha="1" currentColor="{getHistColor()}" change="onChangeCurve()"/>
			<mx:HBox>
				<mx:VBox horizontalAlign="right">
					<mx:HBox>
						<mx:Label text="Channel:"/>
						<mx:ComboBox id="cmbChannel" dataProvider="{cmbChoices}" width="90" change="onChangeChannel()" />
					</mx:HBox>
					<mx:Button id="btnHist" label="Curve" width="90" useHandCursor="true" buttonMode="true" click="onClickHist()"/>
					<mx:Button id="btnPreview" label="Preview" width="90" useHandCursor="true" buttonMode="true" click="onClickPreview()"/>
					<mx:Button id="btnOK" label="OK" width="90" useHandCursor="true" buttonMode="true" click="onClickOK()"/>
					<mx:Button id="btnAuto" label="Auto" width="90" enabled="false" useHandCursor="true" buttonMode="true" click="onClickAuto()"/>
					<mx:Button id="btnCancel" label="Cancel" width="90" useHandCursor="true" buttonMode="true" click="onClickCancel()"/>
				</mx:VBox>
			</mx:HBox>
		</mx:HBox>
	</mx:VBox>
	
	<mx:HBox>
		<mx:Image 	id="imgIcon" 
					source="@Embed(source='/../resources/histogram.png')"
					click="onClickIcon()" useHandCursor="true" buttonMode="true" />
	</mx:HBox>
	
	<mx:Image 	id="imgBlk" x="5" y="180" visible="false" useHandCursor="true" buttonMode="true" 
				source="@Embed(source='/../resources/blk_small.png')"
				mouseDown="onMouseDownBlk()"/>
	<mx:Image 	id="imgWht" x="260" y="180" visible="false" useHandCursor="true" buttonMode="true"  
				source="@Embed(source='/../resources/wht_small.png')"
				mouseDown="onMouseDownWht()"/>
	<mx:Image 	id="imgGam" x="132" y="180" visible="false" useHandCursor="true" buttonMode="true"  
				source="@Embed(source='/../resources/gry_small.png')"
				mouseDown="onMouseDownGam()"/>
		
</mx:Canvas>
